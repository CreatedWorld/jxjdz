using System.Collections.Generic;
using Platform.Net;
using PureMVC.Interfaces;
using PureMVC.Patterns;
using UnityEngine;
using UnityEngine.SceneManagement;
using Platform.Global;
using Platform.Model.VO.BattleVO;
using System;
using Utils;

namespace Platform.Model.Battle
{
    /// <summary>
    /// 牌局数据代理
    /// </summary>
    internal class BattleProxy : Proxy, IProxy
    {
        /// <summary>
        /// 当前是第几局
        /// </summary>
        public int curInnings = 1;
        /// <summary>
        /// 是否跳过缓动
        /// </summary>
        public bool isSkipTween;
        /// <summary>
        /// 本局是否已开始
        /// </summary>
        public bool isStart;
        /// <summary>
        /// 是否正在发牌
        /// </summary>
        public bool isSending = false;
        /// <summary>
        /// 房间房主id
        /// </summary>
        public int creatorId;

        /// <summary>
        /// 宝牌
        /// </summary>
        public int treasureCardCode;

        /// <summary>
        /// 本局结算信息
        /// </summary>
        public PushMatchResultS2C matchResultS2C;
        /// <summary>
        /// 之前的庄家id
        /// </summary>
        public int perBankerId;

        /// <summary>
        /// 当前播放的玩家动作
        /// </summary>
        public PushPlayerActS2C playerActS2C;

        /// <summary>
        /// 推送的玩家操作提示
        /// </summary>
        public PushPlayerActTipS2C playerActTipS2C;

        /// <summary>
        /// 玩家信息字典{LocalId:玩家信息VO}
        /// </summary>
        public Dictionary<int, PlayerInfoVOS2C> playerIdInfoDic;

        /// <summary>
        /// 玩家信息字典{Sit:玩家信息VO}
        /// </summary>
        public Dictionary<int, PlayerInfoVOS2C> playerSitInfoDic;

        /// <summary>
        /// 是否轮到自己出手
        /// </summary>
        public bool isSelfAction;
        /// <summary>
        /// 房间结算信息
        /// </summary>
        public PushRoomResultS2C roomResultS2C;
        /// <summary>
        /// 剩余牌数
        /// </summary>
        public int leftCard;
        /// <summary>
        /// 语音缓存队列
        /// </summary>
        public Queue<AudioPacket> speekPacket = new Queue<AudioPacket>();
        /// <summary>
        /// 胡牌类型
        /// </summary>
        private List<PlayerActType> huTypes = new List<PlayerActType>();
        /// <summary>
        /// 当前播放的战报
        /// </summary>
        public PlayReportS2C report;
        /// <summary>
        /// 战报开始时的本地时间
        /// </summary>
        public float reportLocalTime;
        /// <summary>
        /// 禁止期间未播放的动作队列
        /// </summary>
        private List<ForbitActionVO> forbitActions;
        /// <summary>
        /// 当前是否播放战报
        /// </summary>
        public bool isReport = false;
        /// <summary>
        /// 之前发送语言聊天的时间
        /// </summary>
        public long perSendChatTime = 0;
        /// <summary>
        /// 是否正在播放胡牌动画
        /// </summary>
        public bool isPlayHu = false;
        /// <summary>
        /// 刚刚收到的解散申请
        /// </summary>
        public int disloveApplyUserId;
        /// <summary>
        /// 本局开始时间
        /// </summary>
        public long startTime;
        /// <summary>
        /// 申请解散剩余时间
        /// </summary>
        public int disloveRemainTime;
        /// <summary>
        /// 解散剩余时间戳
        /// </summary>
        public long disloveRemainUT;
        /// <summary>
        /// 同意的玩家id数组
        /// </summary>
        public List<int> agreeIds = new List<int>();
        /// <summary>
        /// 不同意的玩家id数组
        /// </summary>
        public List<int> refuseIds = new List<int>();
        /// <summary>
        /// 是否有申请解散
        /// </summary>
        public bool hasDisloveApply;
        /// <summary>
        /// 听的牌数组
        /// </summary>
        public List<int> tingCards = new List<int>();
        /// <summary>
        /// 牌堆内未拿的牌序号数组
        /// </summary>
        public List<int> unGetHeapCardIndexs;
        /// <summary>
        /// 是否禁止操作正在发牌
        /// </summary>
        private bool _isForbit = false;
        /// <summary>
        /// 是否禁止操作
        /// </summary>
        public bool isForbit
        {
            get
            {
                return _isForbit;
            }

            set
            {
                _isForbit = value;
                if (!value)
                {
                    PlayActionArr();
                }
            }
        }
        /// <summary>
        /// 拿牌的牌堆起始序号,自己的牌堆第一张牌为0，需要将后端的起始序号转为自己的起始序号
        /// </summary>
        public int sendHeapStartIndex = 0;
        public BattleProxy(string NAME) : base(NAME)
        {
            huTypes.Add(PlayerActType.CHI_HU);
            huTypes.Add(PlayerActType.QIANG_AN_GANG_HU);
            huTypes.Add(PlayerActType.QIANG_PENG_GANG_HU);
            huTypes.Add(PlayerActType.QIANG_ZHI_GANG_HU);
            huTypes.Add(PlayerActType.SELF_HU);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.ENTER_ROOMSERVER_S2C, CreateRoomHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.JOIN_ROOM_S2C, JoinInRoomHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_JOIN, PushJoinHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.EXIT_S2C, ExitHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.DISSOLUTION_S2C,DissolutionHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_READY, PushReadyHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.GAME_START_S2C, GameStartHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_PLAYER_ACTTIP, PushPlayerActTipHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_PLAYER_ACT, PushPlayerActHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_MATCH_END, PushMatchEndHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_ROOM_END, PushRoomEndHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_VOICE, PushVoiceHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PUSH_CHAT, PushChatHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.GET_PLAYERINFO_S2C, GetUserInfoHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.DISLOVEAPPLY_S2C, DisloveApplyHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.CANCEL_DISSLOVEAPPLY_S2C, DisloveCancelHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.DISSLOVEROOM_CONFIRM_S2C, DisloveConfirmHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.RESPONSE_PLAYVIDEO_S2C, PlayVideo);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.ACTERROR_S2C, ActErrorHandler);
            GameMgr.Instance.AddMsgHandler(MsgNoS2C.PLAYAMAHJONG_S2C, PlayAmahjongHandler);
        }
        /// <summary>
        /// 播放缓存的动作
        /// </summary>
        private void PlayActionArr()
        {
            isSkipTween = true;
            for (int i = 0; i < forbitActions.Count; i++)
            {
                if (forbitActions[i].isActTip)
                {
                    PushPlayerActTipHandler(forbitActions[i].bytes);
                }
                else
                {
                    PushPlayerActHandler(forbitActions[i].bytes);
                }
            }
            forbitActions.Clear();
            isSkipTween = false;
        }
        /// <summary>
        /// 庄家VOS2C
        /// </summary>
        public PlayerInfoVOS2C BankerPlayerInfoVOS2C
        {
            get
            {
                foreach (var playerInfoVOS2C in playerIdInfoDic)
                    if (playerInfoVOS2C.Value.isBanker)
                        return playerInfoVOS2C.Value;
                return null;
            }
        }
        /// <summary>
        /// 东家VOS2C
        /// </summary>
        public PlayerInfoVOS2C MasterPlayerInfoVOS2C
        {
            get
            {
                foreach (var playerInfoVOS2C in playerIdInfoDic)
                {
                    if (playerInfoVOS2C.Value.isMaster)
                    {
                        return playerInfoVOS2C.Value;
                    }
                }
                return null;
            }
        }

        /// <summary>
        /// 创建房间返回
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void CreateRoomHandler(byte[] bytes)
        {
            playerActTipS2C = null;
            playerIdInfoDic = new Dictionary<int, PlayerInfoVOS2C>();
            var selfInfoVO = new PlayerInfoVOS2C();
            var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            selfInfoVO.headIcon = playerInfoProxy.UserInfo.HeadIconUrl;
            selfInfoVO.isBanker = false;
            selfInfoVO.isMaster = false;
            selfInfoVO.isReady = false;
            selfInfoVO.userId = playerInfoProxy.UserInfo.UserID;
            selfInfoVO.name = playerInfoProxy.UserInfo.UserName;
            selfInfoVO.score = playerInfoProxy.UserInfo.Score;
            selfInfoVO.sex = playerInfoProxy.UserInfo.Score;
            selfInfoVO.sit = hallProxy.HallInfo.Seat;
            tingCards.Clear();
            playerIdInfoDic.Add(selfInfoVO.userId, selfInfoVO);
            UpdatePlayerSitDic();
            curInnings = 1;
            creatorId = playerInfoProxy.UserInfo.UserID;
            isStart = false;
            isSelfAction = false;
            hasDisloveApply = false;
            agreeIds.Clear();
            refuseIds.Clear();
            UIManager.Instance.HideUI(UIViewID.CREATEROOM_VIEW,
                () =>
                {
                    var loadInfo = new LoadSceneInfo(ESceneID.SCENE_BATTLE, LoadSceneType.ASYNC, LoadSceneMode.Additive);
                    SendNotification(NotificationConstant.MEDI_GAMEMGR_LOADSCENE, loadInfo);
                });

            var readyC2S = new ReadyC2S();
            NetMgr.Instance.SendBuff(SocketType.BATTLE,MsgNoC2S.READY_C2S.GetHashCode(), 0, readyC2S);
        }

        /// <summary>
        /// 加入房间返回
        /// </summary>
        /// <param PlayerName="bytes">消息体</param>
        private void JoinInRoomHandler(byte[] bytes)
        {
            forbitActions = new List<ForbitActionVO>();
            var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            playerIdInfoDic = new Dictionary<int, PlayerInfoVOS2C>();
            var joinRoomS2C = NetMgr.Instance.DeSerializes<JoinRoomS2C>(bytes);
            creatorId = joinRoomS2C.createId;
            isStart = joinRoomS2C.isStart;
            startTime = joinRoomS2C.startTime;
            hasDisloveApply = joinRoomS2C.hasDisloveApply;
            agreeIds = joinRoomS2C.agreeIds;
            refuseIds = joinRoomS2C.refuseIds;
            disloveRemainTime = joinRoomS2C.disloveRemainTime;
            disloveRemainUT = joinRoomS2C.disloveRemainUT;
            tingCards = joinRoomS2C.tingCards;
            treasureCardCode = joinRoomS2C.treasureCardCode;
            if (joinRoomS2C.agreeIds.Count > 0)
            {
                disloveApplyUserId = joinRoomS2C.agreeIds[0];
            }
            int putCardNum = 0;
            foreach (var voS2C in joinRoomS2C.playInfoArr)
            {
                if (isStart)//已开局牌局手中的牌自动排序
                {
                    voS2C.handCards.Sort();
                }
                playerIdInfoDic.Add(voS2C.userId, voS2C);
                putCardNum += voS2C.handCards.Count;
                if (voS2C.getCard > 0)
                {
                    putCardNum += 1;
                }
                foreach (PengGangCardVO pengGangCardVo in voS2C.pengGangCards)
                {
                    putCardNum += pengGangCardVo.pengGangCards.Count;
                }
                putCardNum += voS2C.putCards.Count;
            }
            UpdatePlayerSitDic();
            hallProxy.HallInfo.RoomCode = joinRoomS2C.roomCode;
            hallProxy.HallInfo.Innings = joinRoomS2C.innings;
            curInnings = joinRoomS2C.curInnings;
            playerActTipS2C = joinRoomS2C.playerTipAct;
            if (playerActTipS2C != null)
            {
                isSelfAction = playerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID;
            }
            leftCard = joinRoomS2C.leftCardCount;
            if (isStart)
            {
                if (GlobalData.hasHeap)
                {
                    InitHeapCardIndexs(leftCard);
                }
            }
            if (UIManager.Instance.GetUIView(UIViewID.JOINROOM_VIEW).IsShow)
            {
                UIManager.Instance.HideUI(UIViewID.JOINROOM_VIEW, EnterBattle);
            }
            else
            {
                EnterBattle();
            }
            
            UIManager.Instance.HideUI(UIViewID.MATCHING_VIEW,
                () =>
                {
                    var loadInfo = new LoadSceneInfo(ESceneID.SCENE_BATTLE, LoadSceneType.ASYNC, LoadSceneMode.Additive);
                    SendNotification(NotificationConstant.MEDI_GAMEMGR_LOADSCENE, loadInfo);
                });
        }

        /// <summary>
        /// 进入战斗场景
        /// </summary>
        private void EnterBattle()
        {
            var loadInfo = new LoadSceneInfo(ESceneID.SCENE_BATTLE, LoadSceneType.ASYNC,
                            LoadSceneMode.Additive);
            SendNotification(NotificationConstant.MEDI_GAMEMGR_LOADSCENE, loadInfo);
        }

        /// <summary>
        /// 推送玩家加入房间
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void PushJoinHandler(byte[] bytes)
        {
            var pushJoinS2C = NetMgr.Instance.DeSerializes<PushJoinS2C>(bytes);
            playerIdInfoDic.Add(pushJoinS2C.playerInfo.userId, pushJoinS2C.playerInfo);
            UpdatePlayerSitDic();
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_UPDATESINGLEHEAD, pushJoinS2C.playerInfo);
        }

        /// <summary>
        /// 离开房间
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void ExitHandler(byte[] bytes)
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var exitS2C = NetMgr.Instance.DeSerializes<ExitRoomS2C>(bytes);
            if (exitS2C.clientCode != ErrorCode.SUCCESS)
            {
                DialogMsgVO dialogMsgVO = new DialogMsgVO();
                dialogMsgVO.title = "退出";
                dialogMsgVO.dialogType = DialogType.ALERT;
                dialogMsgVO.content = "房间开局后不可中途退出";
                DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
                dialogView.data = dialogMsgVO;
                return;
            }
            if (exitS2C.userId == playerInfoProxy.UserInfo.UserID) //自己退出
            {
                PopMsg.Instance.ShowMsg("成功退出房间");
                playerIdInfoDic = null;
                playerSitInfoDic = null;
                curInnings = 0;
                var loadInfo = new LoadSceneInfo(ESceneID.SCENE_HALL, LoadSceneType.ASYNC, LoadSceneMode.Additive);
                SendNotification(NotificationConstant.MEDI_GAMEMGR_LOADSCENE, loadInfo);
            }
            else
            {
                var exitPlayerInfoVO = playerIdInfoDic[exitS2C.userId];
                playerIdInfoDic.Remove(exitS2C.userId);
                UpdatePlayerSitDic();
                SendNotification(NotificationConstant.MEDI_BATTLEVIEW_UPDATESINGLEHEAD, exitPlayerInfoVO);
            }
        }

        /// <summary>
        /// 解散房间
        /// </summary>
        /// <param name="bytes"></param>
        private void DissolutionHandler(byte[] bytes)
        {
            var disloveS2C = NetMgr.Instance.DeSerializes<DissolveRoomS2C>(bytes);
            if (disloveS2C.clientCode != ErrorCode.SUCCESS)
            {
                return;
            }
            if (roomResultS2C == null)//房间未结算显示解散提示
            {
                DialogMsgVO dialogMsgVO = new DialogMsgVO();
                dialogMsgVO.title = "解散提示";
                dialogMsgVO.dialogType = DialogType.ALERT;
                dialogMsgVO.content = "房间已解散";
                dialogMsgVO.confirmCallBack = (() =>
                {
                    playerIdInfoDic = null;
                    playerSitInfoDic = null;
                    curInnings = 0;
                    var loadInfo = new LoadSceneInfo(ESceneID.SCENE_HALL, LoadSceneType.ASYNC, LoadSceneMode.Additive);
                    SendNotification(NotificationConstant.MEDI_GAMEMGR_LOADSCENE, loadInfo);
                });
                DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
                dialogView.data = dialogMsgVO;
            }            
            UIManager.Instance.HideUI(UIViewID.DISLOVE_STATISTICS_VIEW);
        }

        /// <summary>
        /// 推送玩家准备
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void PushReadyHandler(byte[] bytes)
        {
            var pushReadyS2C = NetMgr.Instance.DeSerializes<PushReadyS2C>(bytes);
            //Debug.Log("推送玩家准备时的id："+ pushReadyS2C.userId);
            var readyPlayerInfoVO = playerIdInfoDic[pushReadyS2C.userId];
            readyPlayerInfoVO.isReady = true;
            SendNotification(NotificationConstant.MEDI_READY_COMPLETE);
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_UPDATESINGLEHEAD, readyPlayerInfoVO);
        }

        /// <summary>
        /// 推送发牌
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void GameStartHandler(byte[] bytes)
        {
            forbitActions = new List<ForbitActionVO>();
            isSending = true;
            isStart = true;
            var playerInfoProxy =
                ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var gameStartS2C = NetMgr.Instance.DeSerializes<GameStart_S2C>(bytes);
            startTime = gameStartS2C.startTime;
            tingCards.Clear();
            var isFirstMatch = true;
            foreach (KeyValuePair<int, PlayerInfoVOS2C> playerInfoVos2C in playerIdInfoDic)//已经有庄家
            {
                if (playerInfoVos2C.Value.isBanker)
                {
                    isFirstMatch = false;
                    break;
                }
            }
            var bankerPlayerInfoVO = playerIdInfoDic[gameStartS2C.bankerUserId]; //设置庄家
            leftCard = gameStartS2C.leftCardCount;
            curInnings = gameStartS2C.currentTimes;
            if (curInnings == 1)
            {
                bankerPlayerInfoVO.isMaster = true;
            }

            foreach (KeyValuePair<int, PlayerInfoVOS2C> playerInfoVos2C in playerIdInfoDic)
            {
                playerInfoVos2C.Value.pengGangCards.Clear();
                playerInfoVos2C.Value.handCards.Clear();
                playerInfoVos2C.Value.putCards.Clear();
                playerInfoVos2C.Value.isBanker = playerInfoVos2C.Value.userId == gameStartS2C.bankerUserId;
                if (playerInfoVos2C.Value.userId == playerInfoProxy.UserInfo.UserID)
                {
                    playerInfoVos2C.Value.handCards.AddRange(gameStartS2C.handCards);
                    if (playerInfoProxy.UserInfo.UserID == gameStartS2C.bankerUserId)//自己是庄家,给自己加一张牌
                    {
                        playerInfoVos2C.Value.getCard = gameStartS2C.touchMahjongCode;
                    }
                }
                else
                {
                    for (int i = 0; i < GlobalData.PLAYER_CARD_NUM; i++)
                    {
                        playerInfoVos2C.Value.handCards.Add(GlobalData.CardValues[0]);
                    }
                    if (playerInfoVos2C.Value.userId == gameStartS2C.bankerUserId)//庄家再发一张牌
                    {
                        playerInfoVos2C.Value.getCard = GlobalData.CardValues[0];
                    }
                }
            }
            playerActTipS2C = gameStartS2C.pushPlayerActTipS2C;
            isSelfAction = gameStartS2C.pushPlayerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID;
            if (GlobalData.hasHeap)
            {
                InitHeapCardIndexs(GlobalData.CardWare.Length);
            }
            //精牌
            treasureCardCode = gameStartS2C.treasureCardCode;
            SendNotification(NotificationConstant.MEDI_BATTLE_SENDCARD);
            SendNotification(NotificationConstant.MEDI_BATTLE_SHOWJING);
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_UPDATEALLHEAD, isFirstMatch);
        }
        /// <summary>
        /// 初始化牌堆未拿牌的序号
        /// </summary>
        private void InitHeapCardIndexs(int leftCardValue)
        {
            unGetHeapCardIndexs = new List<int>();
            int recivedCard = GlobalData.CardWare.Length - leftCardValue;
            for (int i = sendHeapStartIndex + recivedCard; i < GlobalData.CardWare.Length; i++)
            {
                unGetHeapCardIndexs.Add(i);
            }
            for (int i = 0; i < sendHeapStartIndex; i++)
            {
                unGetHeapCardIndexs.Add(i);
            }
        }
        /// <summary>
        /// 推送玩家动作提示
        /// </summary>
        /// <param name="bytes">消息体</param>
        private void PushPlayerActTipHandler(byte[] bytes)
        {
            if (_isForbit)
            {
                var actionVO = new ForbitActionVO();
                actionVO.isActTip = true;
                actionVO.bytes = bytes;
                forbitActions.Add(actionVO);
                return;
            }
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var curActTips = NetMgr.Instance.DeSerializes<PushPlayerActTipS2C>(bytes);
            if (playerActTipS2C != null && playerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID)
            {
                for (int i = 0; i < huTypes.Count; i++)
                {
                    if (playerActTipS2C.acts.IndexOf(huTypes[i]) != -1)//自己已接到胡牌推送,忽略后续的提示
                    {
                        return;
                    }
                }
            }
            playerActTipS2C = curActTips;
            isSelfAction = playerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID;
            if (isStart)
                SendNotification(NotificationConstant.MEDI_BATTLE_PLAYACTTIP);
            if (isSelfAction && GlobalData.isDebugModel)
            {
                if (playerActTipS2C.acts.Contains(PlayerActType.PASS))
                {
                    NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.GUO_C2S.GetHashCode(), 0, new GuoC2S());
                }
                else if (playerActTipS2C.acts.Contains(PlayerActType.PUT_CARD))
                {
                    var putC2S = new PlayAMahjongC2S();
                    putC2S.mahjongCode = playerActTipS2C.actCards[0];
                    NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.PLAYAMAHJONG_C2S.GetHashCode(), 0, putC2S);
                }
            }
        }

        /// <summary>
        /// 动作提示延迟
        /// </summary>
        private void DelayPlayerActTip(byte[] bytes)
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var curActTips = NetMgr.Instance.DeSerializes<PushPlayerActTipS2C>(bytes);
            if (playerActTipS2C != null && playerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID)
            {
                for (int i = 0; i < huTypes.Count; i++)
                {
                    if (playerActTipS2C.acts.IndexOf(huTypes[i]) != -1)//自己已接到胡牌推送,忽略后续的提示
                    {
                        return;
                    }
                }
            }
            playerActTipS2C = curActTips;
            //有胡牌操作,过滤其他非胡牌操作
            for (int i = 0; i < huTypes.Count; i++)
            {
                if (playerActTipS2C.acts.IndexOf(huTypes[i]) != -1)
                {
                    for (int j = 0; j < playerActTipS2C.acts.Count;)
                    {
                        if (huTypes.IndexOf(playerActTipS2C.acts[j]) == -1)
                        {
                            playerActTipS2C.acts.RemoveAt(j);
                        }
                        else
                        {
                            j++;
                        }
                    }
                    break;
                }
            }
            isSelfAction = playerActTipS2C.optUserId == playerInfoProxy.UserInfo.UserID;
            if (isStart)
                SendNotification(NotificationConstant.MEDI_BATTLE_PLAYACTTIP);
        }

        /// <summary>
        /// 推送玩家动作
        /// </summary>
        /// <param PlayerName="bytes">消息体</param>
        private void PushPlayerActHandler(byte[] bytes)
        {
            if (_isForbit)
            {
                var actionVO = new ForbitActionVO();
                actionVO.isActTip = false;
                actionVO.bytes = bytes;
                forbitActions.Add(actionVO);
                return;
            }
            playerActTipS2C = null;
            playerActS2C = NetMgr.Instance.DeSerializes<PushPlayerActS2C>(bytes);
            switch (playerActS2C.act)
            {
                case PlayerActType.ZHI_GANG:
                    ZhiGangActHandler();
                    break;
                case PlayerActType.BACK_AN_GANG:
                    BackAnGangActHandler();
                    break;
                case PlayerActType.COMMON_AN_GANG:
                    CommonAnGangActHandler();
                    break;
                case PlayerActType.BACK_PENG_GANG:
                    BackPengGangActHandler();
                    break;
                case PlayerActType.COMMON_PENG_GANG:
                    CommonPengGangActHandler();
                    break;
                case PlayerActType.GET_CARD:
                    Timer.Instance.AddTimer(0, 1, 1.5f, () => { GetCardActHandler(); });
                    break;
                case PlayerActType.QIANG_AN_GANG_HU:
                    HuActHandler(false);
                    break;
                case PlayerActType.QIANG_PENG_GANG_HU:
                    HuActHandler(false);
                    break;
                case PlayerActType.QIANG_ZHI_GANG_HU:
                    HuActHandler(false);
                    break;
                case PlayerActType.SELF_HU:
                    HuActHandler(true);
                    break;
                case PlayerActType.CHI_HU:
                    HuActHandler(false);
                    break;
                case PlayerActType.PENG:
                    PengActHandler();
                    break;
                case PlayerActType.PASS:
                    PassActHandler();
                    break;
                case PlayerActType.PUT_CARD:
                    PutCardActHandler();
                    break;
                case PlayerActType.CHI:
                    ChiActHandler();
                    break;
            }
        }

        /// <summary>
        /// 推送直杠牌消息处理
        /// </summary>
        private void ZhiGangActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengGangPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            var pengGangCardVOS2C = new PengGangCardVO();
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.targetUserId = playerActS2C.targetUserId;
            pengGangPlayerVOS2C.pengGangCards.Add(pengGangCardVOS2C);
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId)//是自己找到对应的牌移除
            {
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
            }
            else//非自己随机找牌移除
            {
                var randomIndex = UnityEngine.Random.Range(0, pengGangPlayerVOS2C.handCards.Count - 3);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }
            
            pengGangPlayerVOS2C.handCards.Sort();
            var targetPlayerVOS2C = playerIdInfoDic[playerActS2C.targetUserId];
            targetPlayerVOS2C.putCards.RemoveAt(targetPlayerVOS2C.putCards.Count - 1); //移除最后一张出牌
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYZHIGANG);
        }

        /// <summary>
        /// 推送回头暗杠消息处理
        /// </summary>
        private void BackAnGangActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengGangPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            var pengGangCardVOS2C = new PengGangCardVO();
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.targetUserId = playerActS2C.targetUserId;
            pengGangPlayerVOS2C.pengGangCards.Add(pengGangCardVOS2C);
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId)//是自己找到对应的牌移除
            {
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
            }
            else//非自己随机找牌移除
            {
                var randomIndex = UnityEngine.Random.Range(0, pengGangPlayerVOS2C.handCards.Count - 4);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }
            
            pengGangPlayerVOS2C.handCards.Sort();
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAY_BACKANGANG);
        }

        /// <summary>
        /// 推送暗杠消息处理
        /// </summary>
        private void CommonAnGangActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengGangPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            var pengGangCardVOS2C = new PengGangCardVO();
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.targetUserId = playerActS2C.targetUserId;
            pengGangPlayerVOS2C.pengGangCards.Add(pengGangCardVOS2C);
            pengGangPlayerVOS2C.getCard = 0;
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId) //是自己找到对应的牌移除
            {
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
               
            }
            else//非自己随机找牌移除
            {
                var randomIndex = UnityEngine.Random.Range(0, pengGangPlayerVOS2C.handCards.Count - 3);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }
            
            pengGangPlayerVOS2C.handCards.Sort();
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAY_COMMONANGANG);
        }

        /// <summary>
        /// 推送普通碰杠消息处理
        /// </summary>
        private void CommonPengGangActHandler()
        {
            var pengGangPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            foreach (var pengGangCardVos2C in pengGangPlayerVOS2C.pengGangCards)
                if (pengGangCardVos2C.pengGangCards[0] == playerActS2C.actCard)
                    pengGangCardVos2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangPlayerVOS2C.getCard = -1;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAY_COMMONPENGGANG);
        }

        /// <summary>
        /// 推送回头碰杠消息处理
        /// </summary>
        private void BackPengGangActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengGangPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            foreach (var pengGangCardVos2C in pengGangPlayerVOS2C.pengGangCards)
                if (pengGangCardVos2C.pengGangCards[0] == playerActS2C.actCard)
                    pengGangCardVos2C.pengGangCards.Add(playerActS2C.actCard);
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId) //是自己找到对应的牌移除
            {
                pengGangPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
            }
            else
            {
                var randomIndex = UnityEngine.Random.Range(0, pengGangPlayerVOS2C.handCards.Count - 1);
                pengGangPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }
            pengGangPlayerVOS2C.getCard = 0;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAY_BACKPENGGANG);
        }


        /// <summary>
        /// 推送摸牌消息处理
        /// </summary>
        private void GetCardActHandler()
        {
            leftCard -= 1;
            var getCardPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            if (getCardPlayerVOS2C.getCard != 0)
            {
                getCardPlayerVOS2C.handCards.Add(getCardPlayerVOS2C.getCard);
            }
            if (isReport)
            {
                //var playerCards = new List<PlayerCardVO>();
                //playerCards.Add(RecordCardInfo(getCardPlayerVOS2C, PlayerCardType.GET));
                //reportActions.Add(playerCards);
            }
            getCardPlayerVOS2C.getCard = playerActS2C.actCard;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYGETCARD);
            //TODO...判断如果拿到的牌是精牌
            //if (getCardPlayerVOS2C.getCard == treasureCardCode)
            //{
            //    SendNotification(NotificationConstant.MEDI_BATTLE_SHOWJING);
            //}
        }

        /// <summary>
        /// 推送胡牌消息处理
        /// </summary>
        private void HuActHandler(bool isSelf)
        {
            var huCardPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            if (isSelf) //自摸
            {
                if (huCardPlayerVOS2C.getCard > 0)
                {
                    huCardPlayerVOS2C.handCards.Add(huCardPlayerVOS2C.getCard);
                    huCardPlayerVOS2C.getCard = 0;
                }
            }
            else
            {
                huCardPlayerVOS2C.handCards.Add(playerActS2C.actCard);
                var targetPlayerVOS2C = playerIdInfoDic[playerActS2C.targetUserId];
                targetPlayerVOS2C.putCards.RemoveAt(targetPlayerVOS2C.putCards.Count - 1); //移除最后一张出牌
            }
            playerActTipS2C = null;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYHU, isSelf);
        }

        /// <summary>
        /// 推送碰牌消息处理
        /// </summary>
        private void PengActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            var pengGangCardVOS2C = new PengGangCardVO();
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.targetUserId = playerActS2C.targetUserId;
            pengPlayerVOS2C.pengGangCards.Add(pengGangCardVOS2C);
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId) //是自己找到对应的牌移除
            {
                pengPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
                pengPlayerVOS2C.handCards.Remove(playerActS2C.actCard);
            }
            else
            {
                var randomIndex = UnityEngine.Random.Range(0, pengPlayerVOS2C.handCards.Count - 2);
                pengPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }
            
            pengPlayerVOS2C.handCards.Sort();

            var targetPlayerVOS2C = playerIdInfoDic[playerActS2C.targetUserId];
            targetPlayerVOS2C.putCards.RemoveAt(targetPlayerVOS2C.putCards.Count - 1); //移除最后一张出牌
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYPENG);
        }

        /// <summary>
        /// 推送过消息处理
        /// </summary>
        private void PassActHandler()
        {
            playerActTipS2C = null;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYPASS);
        }

        /// <summary>
        /// 推送出牌消息处理
        /// </summary>
        private void PutCardActHandler()
        {
            //var putCardPlayerVO = playerIdInfoDic[playerActS2C.userId];
            //putCardPlayerVO.putCards.Add(playerActS2C.actCard);
            //if (putCardPlayerVO.getCard == playerActS2C.actCard)
            //{
            //    putCardPlayerVO.getCard = 0;
            //}
            //else
            //{
            //    putCardPlayerVO.handCards.Remove(playerActS2C.actCard);
            //    putCardPlayerVO.handCards.Sort();
            //}
            //SendNotification(NotificationConstant.MEDI_BATTLE_PLAYPUTCARD);
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var putCardPlayerVO = playerIdInfoDic[playerActS2C.userId];
            if (isReport)
            {
                //var playerCards = new List<PlayerCardVO>();
                //playerCards.Add(RecordCardInfo(putCardPlayerVO, PlayerCardType.GET, PlayerCardType.HAND, PlayerCardType.PUT));
                //reportActions.Add(playerCards);
            }
            putCardPlayerVO.putCards.Add(playerActS2C.actCard);
            if (putCardPlayerVO.getCard != 0)
            {
                putCardPlayerVO.handCards.Add(putCardPlayerVO.getCard);
            }
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId || isReport) //是自己找到对应的牌移除
            { 
                putCardPlayerVO.handCards.Remove(playerActS2C.actCard);
            }
            else
            {
                var randomIndex = UnityEngine.Random.Range(0, putCardPlayerVO.handCards.Count - 1);
                putCardPlayerVO.handCards.RemoveAt(randomIndex);
            }

            putCardPlayerVO.handCards.Sort();
            putCardPlayerVO.getCard = 0;
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYPUTCARD);
        }

        /// <summary>
        /// 推送吃牌消息处理
        /// </summary>
        private void ChiActHandler()
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var pengPlayerVOS2C = playerIdInfoDic[playerActS2C.userId];
            var pengGangCardVOS2C = new PengGangCardVO();
            pengGangCardVOS2C.pengGangCards.Add(playerActS2C.actCard);
            pengGangCardVOS2C.pengGangCards.AddRange(playerActS2C.chiCards);
            pengGangCardVOS2C.targetUserId = playerActS2C.targetUserId;
            pengPlayerVOS2C.pengGangCards.Add(pengGangCardVOS2C);
            if (playerInfoProxy.UserInfo.UserID == playerActS2C.userId) //是自己找到对应的牌移除
            {
                pengPlayerVOS2C.handCards.Remove(playerActS2C.chiCards[0]);
                pengPlayerVOS2C.handCards.Remove(playerActS2C.chiCards[1]);
            }
            else
            {
                var randomIndex = UnityEngine.Random.Range(0, pengPlayerVOS2C.handCards.Count - 2);
                pengPlayerVOS2C.handCards.RemoveAt(randomIndex);
                pengPlayerVOS2C.handCards.RemoveAt(randomIndex);
            }

            pengPlayerVOS2C.handCards.Sort();

            var targetPlayerVOS2C = playerIdInfoDic[playerActS2C.targetUserId];
            targetPlayerVOS2C.putCards.RemoveAt(targetPlayerVOS2C.putCards.Count - 1); //移除最后一张出牌
            SendNotification(NotificationConstant.MEDI_BATTLE_PLAYCHI);
        }

        /// <summary>
        /// 出牌返回
        /// </summary>
        /// <param name="bytes"></param>
        private void PlayAmahjongHandler(byte[] bytes)
        {
            var playAmahjongS2C = NetMgr.Instance.DeSerializes<PlayAMahjongS2C>(bytes);
            tingCards = playAmahjongS2C.tingCards;
            SendNotification(NotificationConstant.TING_UPDATE);
        }

        /// <summary>
        /// 推送本局结束
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void PushMatchEndHandler(byte[] bytes)
        {
            isStart = false;
            matchResultS2C = NetMgr.Instance.DeSerializes<PushMatchResultS2C>(bytes);
            perBankerId = BankerPlayerInfoVOS2C.userId;
            if (matchResultS2C.huUserId.Count == 1) //本局结束,重置玩家状态数据
            {
                foreach (KeyValuePair<int, PlayerInfoVOS2C> keyValuePair in playerIdInfoDic)
                {
                    keyValuePair.Value.isReady = false;
                    if (keyValuePair.Value.userId == matchResultS2C.huUserId[0]) //新庄家
                    {
                        keyValuePair.Value.isBanker = true;
                    }
                    else
                    {
                        keyValuePair.Value.isBanker = false;
                    }
                }
            }
            else if (matchResultS2C.huUserId.Count > 1)
            {
                foreach (KeyValuePair<int, PlayerInfoVOS2C> keyValuePair in playerIdInfoDic)
                {
                    keyValuePair.Value.isReady = false;
                    if (keyValuePair.Value.userId == matchResultS2C.huedUserId) //新庄家
                    {
                        keyValuePair.Value.isBanker = true;
                    }
                    else
                    {
                        keyValuePair.Value.isBanker = false;
                    }
                }
            }
            foreach (PlayerMatchResultVOS2C playerMatchResultVO in matchResultS2C.resultInfos)
            {
                playerMatchResultVO.handCards.Sort();
                playerIdInfoDic[playerMatchResultVO.userId].score += playerMatchResultVO.addScore;
                //playerMatchResultVO.handCards.ForEach(o=> { Debug.Log("玩家的id："+playerMatchResultVO.userId+"  手中的牌：" +o); });

            }
            tingCards.Clear();
            SendNotification(NotificationConstant.TING_UPDATE);
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_UPDATEALLHEAD,false);
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_SHOWMATCHRESULT);
        }


        /// <summary>
        /// 推送房间结束
        /// </summary>
        /// <param PlayerName="bytes"></param>
        private void PushRoomEndHandler(byte[] bytes)
        {
            roomResultS2C = NetMgr.Instance.DeSerializes<PushRoomResultS2C>(bytes);
            if (matchResultS2C == null)
            {
                UIManager.Instance.ShowUI(UIViewID.ROOM_RESULT_VIEW);
            }
        }

        /// <summary>
        /// 刷新座位字典
        /// </summary>
        private void UpdatePlayerSitDic()
        {
            playerSitInfoDic = new Dictionary<int, PlayerInfoVOS2C>();
            foreach (var playerInfoVO in playerIdInfoDic)
                playerSitInfoDic.Add(playerInfoVO.Value.sit, playerInfoVO.Value);
        }

        /// <summary>
        /// 增加局数
        /// </summary>
        public void AddInnings()
        {
            forbitActions.Clear();
            matchResultS2C = null;
            roomResultS2C = null;
            playerActTipS2C = null;
            playerActS2C = null;
            isSending = false;
            isStart = false;
            tingCards.Clear();
            SendNotification(NotificationConstant.TING_UPDATE);
        }

        /// <summary>
        /// 推送语音消息处理
        /// </summary>
        public void PushVoiceHandler(byte[] bytes)
        {
            var pushVoiceS2C = NetMgr.Instance.DeSerializes<PushVoiceS2C>(bytes);
            RecorderSystem.GetAudioPacket(pushVoiceS2C.senderUserId, pushVoiceS2C.flag, pushVoiceS2C.content);
        }

        /// <summary>
        /// 推送聊天消息处理
        /// </summary>
        /// <param name="bytes"></param>
        private void PushChatHandler(byte[] bytes)
        {
            var pushChatS2C = NetMgr.Instance.DeSerializes<PushSendChatS2C>(bytes);
            if (pushChatS2C.content.Contains(GlobalData.FACE_PREFIX))
            {
                SendNotification(NotificationConstant.MEDI_BATTLEVIEW_SHOWFACE, pushChatS2C); 
            }
            else
            {
                SendNotification(NotificationConstant.MEDI_BATTLEVIEW_SHOWCHAT, pushChatS2C);
            }
        }

        /// <summary>
        /// 获取战报内容
        /// </summary>
        /// <param name="bytes"></param>
        private void PlayVideo(byte[] bytes)
        {
            var gameMgrProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.GAMEMGR_PROXY) as GameMgrProxy;
            var playVideoS2C = NetMgr.Instance.DeSerializes<PlayVideoS2C>(bytes);
            report = PlayReportS2C.Paser(playVideoS2C.report);
            var addTime = gameMgrProxy.systemTime - report.startTime;
            foreach (ActionVO action in report.actions)//将时间置为当前服务器时间
            {
                action.actionTime += addTime;
                if (action.isActionTip)
                {
                    action.actTip.tipRemainUT += addTime;
                }
            }
            reportLocalTime = Time.time;
            gameMgrProxy.ReviseScaleSystemTime();
            isReport = true;
            NetMgr.Instance.OnClientReceiveBuff(MsgNoS2C.JOIN_ROOM_S2C.GetHashCode(), 0, report.joinInfo);
            SendNotification(NotificationConstant.MEDI_BATTLEVIEW_SHOW_REPORTVIEW);
        }

        /// <summary>
        /// 获取玩家信息返回
        /// </summary>
        /// <param name="bytes"></param>
        private void GetUserInfoHandler(byte[] bytes)
        {
            var getPlayerInfoS2C = NetMgr.Instance.DeSerializes<GetUserInfoByIdS2C>(bytes);
            var playerInfoView = UIManager.Instance.ShowUI(UIViewID.PLATER_INFO_VIEW) as PlayerInfoView;
            playerInfoView.data = getPlayerInfoS2C;
        }

        /// <summary>
        /// 获取申请解散消息处理
        /// </summary>
        /// <param name="bytes"></param>
        private void DisloveApplyHandler(byte[] bytes)
        {
            var disloveApplyS2C = NetMgr.Instance.DeSerializes<ApplyDissolveRoomS2C>(bytes);
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var gameMgrProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.GAMEMGR_PROXY) as GameMgrProxy;
            disloveApplyUserId = disloveApplyS2C.userId;
            agreeIds.Add(disloveApplyS2C.userId);
            hasDisloveApply = true;
            disloveRemainTime = GlobalData.DISLOVE_APPLY_TIMEOUT;
            disloveRemainUT = gameMgrProxy.systemTime;
            if (disloveApplyS2C.userId == playerInfoProxy.UserInfo.UserID)//自己的申请忽略
            {
                UIManager.Instance.ShowUI(UIViewID.DISLOVE_STATISTICS_VIEW);
                return;
            }
            UIManager.Instance.ShowUI(UIViewID.DISLOVE_APPLY_VIEW);
        }

        /// <summary>
        /// 同意解散
        /// </summary>
        /// <param name="bytes"></param>
        private void DisloveConfirmHandler(byte[] bytes)
        {
            var playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
            var disloveConfirmS2C = NetMgr.Instance.DeSerializes<DissloveRoomConfirmS2C>(bytes);
            agreeIds.Add(disloveConfirmS2C.userId);
            SendNotification(NotificationConstant.UPDATE_DISLOVE_STATISTICS);
            if (disloveConfirmS2C.userId == playerInfoProxy.UserInfo.UserID)
            {
                UIManager.Instance.ShowUI(UIViewID.DISLOVE_STATISTICS_VIEW);
            }
        }

        /// <summary>
        /// 拒绝解散
        /// </summary>
        /// <param name="bytes"></param>
        private void DisloveCancelHandler(byte[] bytes)
        {
            var disloveCancelS2C = NetMgr.Instance.DeSerializes<CancelDissolveRoomS2C>(bytes);
            SendNotification(NotificationConstant.UPDATE_DISLOVE_STATISTICS);
            UIManager.Instance.HideUI(UIViewID.DISLOVE_STATISTICS_VIEW);
            UIManager.Instance.HideUI(UIViewID.DISLOVE_APPLY_VIEW);
            DialogMsgVO dialogMsgVO = new DialogMsgVO();
            dialogMsgVO.title = "解散提示";
            dialogMsgVO.dialogType = DialogType.ALERT;
            dialogMsgVO.content = string.Format("{0}拒绝解散房间",playerIdInfoDic[disloveCancelS2C.userId].name);
            DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
            dialogView.data = dialogMsgVO;
            hasDisloveApply = false;
            agreeIds.Clear();
            refuseIds.Clear();
        }


        /// <summary>
        /// 出牌出错返回
        /// </summary>
        /// <param name="bytes"></param>
        private void ActErrorHandler(byte[] bytes)
        {
            var errorS2C = NetMgr.Instance.DeSerializes<ActErrorS2C>(bytes);
            if (errorS2C.errorCode == ErrorCode.FORBIDDEN_CARD)
            {
                PopMsg.Instance.ShowMsg("当前牌不允许出");
            }
            isSelfAction = true;
        }

        /// <summary>
        /// 清理数据
        /// </summary>
        public void Clear()
        {
            curInnings = 1;
            isStart = false;
            creatorId = 0;
            matchResultS2C = null;
            roomResultS2C = null;
            playerActS2C = null;
            playerActTipS2C = null;
            playerIdInfoDic = null;

            playerSitInfoDic = null;

            isSelfAction = false;
            roomResultS2C = null;
            leftCard = GlobalData.CardWare.Length; ;
            speekPacket = new Queue<AudioPacket>();
            report = null;
            reportLocalTime = 0;
            isReport = false;
            perSendChatTime = 0;
            isPlayHu = false;
        }
    }
}