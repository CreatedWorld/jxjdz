using System.Collections.Generic;
using Platform.Model;
using Platform.Model.Battle;
using Platform.Net;
using PureMVC.Interfaces;
using PureMVC.Patterns;
using UnityEngine;
using Utils;
using System.Collections;
using UnityEngine.EventSystems;
using System;
/// <summary>
/// 战斗场景UI中介
/// </summary>
public class BattleViewMediator : Mediator, IMediator
{
    /// <summary>
    /// 战斗模块数据中介
    /// </summary>
    private BattleProxy battleProxy;
    /// <summary>
    /// 游戏数据中介
    /// </summary>
    private GameMgrProxy gameMgrProxy;
    /// <summary>
    /// 玩家信息数据
    /// </summary>
    private PlayerInfoProxy playerInfoProxy;
    /// <summary>
    /// 同步时间定时器id
    /// </summary>
    private int sysTimeId;
    /// <summary>
    /// 点击后是否展开
    /// </summary>
    private bool isExpand = false;
    public BattleViewMediator(string mediatorName, object viewComponent) : base(mediatorName, viewComponent)
    {
    }

    public BattleView View
    {
        get { return (BattleView) ViewComponent; }
    }

    public override IList<string> ListNotificationInterests()
    {
        IList<string> list = new List<string>();
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_UPDATEALLHEAD);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_UPDATESINGLEHEAD);
        list.Add(NotificationConstant.MEDI_READY_COMPLETE);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYROTATE);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYACTTIP);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAY_COMMONANGANG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAY_BACKANGANG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYGETCARD);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYPASS);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYPENG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYCHI);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAY_COMMONPENGGANG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAY_BACKPENGGANG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYPUTCARD);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYZHIGANG);
        list.Add(NotificationConstant.MEDI_BATTLE_PLAYHU);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_SHOWBANKERICON);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_HIDENRECORDING);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_SHOWPLAYINGVOICE);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_HIDENPLAYINGVOICE);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_SHOWCHAT);
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_SHOWFACE); 
        list.Add(NotificationConstant.MEDI_BATTLEVIEW_SHOW_REPORTVIEW);
        list.Add(NotificationConstant.TING_UPDATE);
        return list;
    }


    public override void OnRegister()
    {
        base.OnRegister();
        battleProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.BATTLE_PROXY) as BattleProxy;
        gameMgrProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.GAMEMGR_PROXY) as GameMgrProxy;
        playerInfoProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.PLAYERINFO) as PlayerInfoProxy;
        View.readyBtn.onClick.AddListener(onReadyClick);
        View.startBtn.onClick.AddListener(onStartClick);
        View.exitBtn.onClick.AddListener(OnDissloutionClick);
        View.dissolutionBtn.onClick.AddListener(OnDissloutionClick);
        //View.expandBtn.onClick.AddListener(ExpendOperateView);
        View.chatBtn.onClick.AddListener(OnChatClick);
        View.settingBtn.onClick.AddListener(OnSettingClick);
        View.inviteBtn.onClick.AddListener(OnInviteClick);

        var voideTrigger = View.voiceBtn.GetComponent<EventTrigger>();
        voideTrigger.triggers = new List<EventTrigger.Entry>();
        EventTrigger.Entry onUp = new EventTrigger.Entry();
        onUp.eventID = EventTriggerType.PointerUp;
        onUp.callback.AddListener(OnVoiceUp);
        EventTrigger.Entry onDown = new EventTrigger.Entry();
        onDown.eventID = EventTriggerType.PointerDown;
        onDown.callback.AddListener(OnVoiceDown);
        voideTrigger.triggers.Add(onDown);
        voideTrigger.triggers.Add(onUp);

        InitView();
    }

    public override void OnRemove()
    {
        base.OnRemove();
        View.readyBtn.onClick.RemoveListener(onReadyClick);
        View.exitBtn.onClick.RemoveListener(OnDissloutionClick);
        View.dissolutionBtn.onClick.RemoveListener(OnDissloutionClick);
        //View.expandBtn.onClick.RemoveListener(ExpendOperateView);
        View.chatBtn.onClick.RemoveListener(OnChatClick);
        View.settingBtn.onClick.RemoveListener(OnSettingClick);
        View.inviteBtn.onClick.RemoveListener(OnInviteClick);
        View.startBtn.onClick.RemoveListener(onStartClick);
        Timer.Instance.CancelTimer(sysTimeId);
    }

    public override void HandleNotification(INotification notification)
    {
        switch (notification.Name)
        {
            case NotificationConstant.MEDI_BATTLEVIEW_UPDATEALLHEAD:
                this.View.roundNumberTxt.transform.parent.parent.parent.gameObject.SetActive(false);
                this.View.CardNumberTxt.transform.parent.parent.parent.gameObject.SetActive(false);
                UpdateAllHeadItem((bool)notification.Body);
                UpdateStartBtn();
                UpdateInviteBtn();
                UpdateDisloveBtn();
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_UPDATESINGLEHEAD:
                UpdateSingleHeadItem(notification.Body as PlayerInfoVOS2C);
                UpdateStartBtn();
                UpdateInviteBtn();
                break;
            case NotificationConstant.MEDI_READY_COMPLETE:
                UpdateReadyBtn();
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYROTATE:
                GlobalData.isNeed = (bool)notification.Body;
                onStartClick();
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_SHOWBANKERICON:
                UpdateBankerIcon();
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYACTTIP:
                ShowPlayActTip();
                View.masterView.ShowPlayActTip();
                break;
            case NotificationConstant.MEDI_BATTLE_PLAY_COMMONANGANG:
                PlayAct(PlayerActType.COMMON_AN_GANG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAY_BACKANGANG:
                PlayAct(PlayerActType.BACK_AN_GANG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYGETCARD:
                View.masterView.ShowPlayActTip();
                UpdateRoomInfo();
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYPASS:
                PlayAct(PlayerActType.PASS);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYPENG:
                PlayAct(PlayerActType.PENG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYCHI:
                PlayAct(PlayerActType.CHI);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAY_COMMONPENGGANG:
                PlayAct(PlayerActType.COMMON_PENG_GANG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAY_BACKPENGGANG:
                PlayAct(PlayerActType.BACK_PENG_GANG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYPUTCARD:
                PlayAct(PlayerActType.PUT_CARD);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYZHIGANG:
                PlayAct(PlayerActType.ZHI_GANG);
                break;
            case NotificationConstant.MEDI_BATTLE_PLAYHU:
                PlayHuAction();
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_HIDENRECORDING:
                View.recordingIcon.SetActive(false);
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_SHOWPLAYINGVOICE:
                ShowVoicePlayIcon((int)notification.Body);
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_HIDENPLAYINGVOICE:
                HidenVoicePlayIcon((int)notification.Body);
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_SHOWCHAT:
                ShowChatInfo(notification.Body as PushSendChatS2C);
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_SHOWFACE:
                ShowFace(notification.Body as PushSendChatS2C);
                break;
            case NotificationConstant.MEDI_BATTLEVIEW_SHOW_REPORTVIEW:
                ShowReportView();
                break;
            case NotificationConstant.TING_UPDATE:
                UpdateTingIcon();
                break;
        }
    }

    /// <summary>
    /// 初始化界面显示
    /// </summary>
    private void InitView()
    {
        UpdateAllHeadItem(false);
        if (battleProxy.isStart && battleProxy.playerActTipS2C != null)
        {
            ShowPlayActTip();
            View.masterView.UpdateMasterInfo();
        }
        View.readyBtn.gameObject.SetActive(!battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID].isReady);
        if (View.huEffect != null)
        {
            GameObject.DestroyImmediate(View.huEffect);
            View.huEffect = null;
        }
        View.masterView.gameObject.SetActive(battleProxy.isStart);
        UpdateRoomInfo();
        if (battleProxy.isReport)
        {
            ShowReportView();
        }
        UpdateStartBtn();
        UpdateInviteBtn();
        UpdateDisloveBtn();
        if (battleProxy.hasDisloveApply)
        {
			if(battleProxy.agreeIds.IndexOf(playerInfoProxy.UserInfo.UserID) == -1 && battleProxy.refuseIds.IndexOf(playerInfoProxy.UserInfo.UserID) == -1)
			{
				UIManager.Instance.ShowUI(UIViewID.DISLOVE_APPLY_VIEW);
			}
			else
			{
				UIManager.Instance.ShowUI(UIViewID.DISLOVE_STATISTICS_VIEW);
			}            
        }
    }

    /// <summary>
    /// 上次点击准备的时间
    /// </summary>
    private float perClickTime = 0;
    /// <summary>
    /// 点击准备按钮
    /// </summary>
    private void onReadyClick()
    {

        if (Time.time - perClickTime < 1)
        {
            return;
        }
        perClickTime = Time.time;
        var readyC2S = new ReadyC2S();
        NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.READY_C2S.GetHashCode(), 0, readyC2S);
    }
    /// <summary>
    /// 点击开始按钮
    /// </summary>
    private void onStartClick()
    {
        
        if (View.upHead.transform.Find("ReadyIcon").gameObject.activeSelf&&
            View.downHead.transform.Find("ReadyIcon").gameObject.activeSelf&&
            View.leftHead.transform.Find("ReadyIcon").gameObject.activeSelf&&
            View.rightHead.transform.Find("ReadyIcon").gameObject.activeSelf)
        {
            this.View.roundNumberTxt.transform.parent.parent.gameObject.SetActive(true);
            this.View.CardNumberTxt.transform.parent.parent.gameObject.SetActive(true);
            this.View.startBtn.gameObject.SetActive(false);
            PlayRotate(GlobalData.isNeed);
            UpdateRoomInfo();
            UpdateDisloveBtn();
            View.readyBtn.gameObject.SetActive(false);
           //UpdateReadyBtn();
        }
        else
        {
            DialogMsgVO dialogVO = new DialogMsgVO();
            dialogVO.dialogType = DialogType.ALERT;
            dialogVO.title = "提示";
            dialogVO.content = "房间人数不足或还有玩家未准备";
            DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
            dialogView.data = dialogVO;
        }
    }

    /// <summary>
    /// 更新所有头像
    /// </summary>
    private void UpdateAllHeadItem(bool isFirstMatch)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        for (var i = 0; i < View.headItemList.Count; i++)
        {
            var nextSit = GlobalData.GetNextSit(selfInfoVO.sit , i);
            if (!battleProxy.playerSitInfoDic.ContainsKey(nextSit))
            {
                View.headItemList[i].GetComponent<HeadItem>().data = null;
            }
            else
            {
                var nextPlayerInfoVOS2C = battleProxy.playerSitInfoDic[nextSit];
                View.headItemList[i].GetComponent<HeadItem>().data = nextPlayerInfoVOS2C;
                if (isFirstMatch)
                {
                    View.headItemList[i].GetComponent<HeadItem>().HidemBanker();
                }
            }
        }
    }

    /// <summary>
    /// 更新单个头像
    /// </summary>
    /// <param name="updatePlayInfoVOS2C"></param>
    private void UpdateSingleHeadItem(PlayerInfoVOS2C updatePlayInfoVOS2C)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var updateHeadIndex = (updatePlayInfoVOS2C.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        if (battleProxy.playerIdInfoDic.ContainsKey(updatePlayInfoVOS2C.userId))
        {
            View.headItemList[updateHeadIndex].GetComponent<HeadItem>().data = updatePlayInfoVOS2C;
        }
        else
        {
            View.headItemList[updateHeadIndex].GetComponent<HeadItem>().data = null;
        }
    }

    /// <summary>
    /// 更新房间信息
    /// </summary>
    private void UpdateRoomInfo()
    {
        if (sysTimeId > 0)
        {
            Timer.Instance.CancelTimer(sysTimeId);
        }
        sysTimeId = Timer.Instance.AddTimer(1, 0, 1, UpdateSystemTime);
        UpdateSystemTime();
        UpdateBattery();
        var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
        View.roomIdTxt.text = string.Format("{0}", hallProxy.HallInfo.RoomCode);
        View.roundTxt.text = string.Format("{0}", GetPayType());
        //View.leftCardNumTxt.text = string.Format("{0}", CapScore());
        View.roundNumberTxt.text = string.Format("{0}", hallProxy.HallInfo.Innings - battleProxy.curInnings);
        View.CardNumberTxt.text = string.Format("{0}", battleProxy.leftCard);
        GameMgr.Instance.StartCoroutine(PingIP());
    }
    /// <summary>
    /// 得到支付类型
    /// </summary>
    /// <returns></returns>
    private string GetPayType()
    {
        var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
        if (hallProxy.HallInfo.PayType == 19)
        {
            return "房主扣";
        }
        else return "AA扣";
    }
    /// <summary>
    /// 获取是否封顶
    /// </summary>
    /// <returns></returns>
    private string CapScore()
    {
        var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
        if (hallProxy.HallInfo.CapScore == 21)
        {
            return "封顶100";
        }
        else return "不封顶";
    }
    /// <summary>
    /// 更新服务器时间
    /// </summary>
    private void UpdateSystemTime()
    {
        if (battleProxy.isReport)//战报显示战报发生时间
        {
            var reportDate = TimeHandle.Instance.GetDateTimeByTimestamp(battleProxy.report.startTime + (long)(Time.time - battleProxy.reportLocalTime) * 1000);
            //View.dateTxt.text = reportDate.ToString("yyyy-MM-dd");
            View.timeTxt.text = reportDate.ToString("HH:mm");
        }
        else
        {
            //View.dateTxt.text = gameMgrProxy.systemDateTime.ToString("yyyy-MM-dd");
            View.timeTxt.text = gameMgrProxy.systemDateTime.ToString("HH:mm");
        }
        if (Application.internetReachability == UnityEngine.NetworkReachability.NotReachable)
        {
            View.netIcon.sprite = Resources.Load<Sprite>("Textures/NetPoor");
        }
        else if (gameMgrProxy.pingBackMS < 100)
        {
            View.netIcon.sprite = Resources.Load<Sprite>("Textures/NetPerfect");
        }
        else if (gameMgrProxy.pingBackMS < 200)
        {

            View.netIcon.sprite = Resources.Load<Sprite>("Textures/NetGood");
        }
        else
        {
            View.netIcon.sprite = Resources.Load<Sprite>("Textures/NetOK");
        }
    }
    /// <summary>
    /// 更新手机电量
    /// </summary>
    private void UpdateBattery()
    {
        try
        {
            int Battery = int.Parse(System.IO.File.ReadAllText("/sys/class/power_supply/battery/capacity"));
            if (Battery >= 80)
            {
                View.Battery.sprite = Resources.Load<Sprite>("Textures/icon_Battery _prospects");
            }
            else if (Battery >= 50 && Battery < 80)
            {
                View.Battery.sprite = Resources.Load<Sprite>("Textures/icon_Battery _prospects");
            }
            else if (Battery >= 0 && Battery < 50)
            {
                View.Battery.sprite = Resources.Load<Sprite>("Textures/icon_Battery _prospects");
            }
        }
        catch (Exception e)
        {

            Debug.Log("Failed to read battery power; " + e.Message);
        }
        
    }

    private IEnumerator PingIP()
    {
        var ping = new Ping(GlobalData.LoginServer);
        while (!ping.isDone)
        {
            yield return null;
        }
        gameMgrProxy.pingBackMS = ping.time;
        yield return new WaitForSeconds(10);
        GameMgr.Instance.StartCoroutine(PingIP());
    }

    /// <summary>
    /// 显示庄家旋转标志
    /// </summary>
    private void PlayRotate(bool isFirstMatch)
    {
        View.masterView.gameObject.SetActive(true);
        if (isFirstMatch)//第一局需要转庄家
        {
            View.masterView.PlayRotate();
        }
        else
        {
            View.masterView.UpdateMasterInfo();
            View.masterView.ShowPlayActTip();
            SendNotification(NotificationConstant.MEDI_BATTLE_SENDCARD);
        }
        for (var i = 0; i < View.headItemList.Count; i++)
        {
            View.headItemList[i].GetComponent<HeadItem>().HidenReady();
        }
    }

    /// <summary>
    /// 头像框显示庄家标志
    /// </summary>
    private void UpdateBankerIcon()
    {
        var bankerInfoVO = battleProxy.BankerPlayerInfoVOS2C;
        for (var i = 0; i < View.headItemList.Count; i++)
        {
            View.headItemList[i].GetComponent<HeadItem>().ShowBankerIcon(bankerInfoVO.userId);
        }
    }

    /// <summary>
    /// 显示玩家操作提示,其他人提示动作时隐藏自己的动作提示
    /// </summary>
    private void ShowPlayActTip()
    {
        View.masterView.ShowPlayActTip();
        var tipPlayVO = battleProxy.playerActTipS2C;
        if (tipPlayVO == null)
        {
            return;
        }
        if (tipPlayVO.optUserId == playerInfoProxy.UserInfo.UserID)
        {
            GameMgr.Instance.StartCoroutine(View.headItemList[0].GetComponent<HeadItem>().ShowPlayActTip());
        }
    }

    /// <summary>
    /// 播放玩家操作提示
    /// </summary>
    /// <param name="playerAct"></param>
    private void PlayAct(PlayerActType playerAct)
    {
        View.masterView.ShowPlayActTip();
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var actPlayerInfoVO = battleProxy.playerIdInfoDic[battleProxy.playerActS2C.userId];
        var actIndex = (actPlayerInfoVO.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        if (actIndex != 0)
        {
            View.headItemList[actIndex].GetComponent<HeadItem>().PlayAct(playerAct);
        }
        else
        {
            View.headItemList[0].GetComponent<HeadItem>().HidenPlayActTip();
        }

    }

    /// <summary>
    /// 播放胡牌动画
    /// </summary>
    private void PlayHuAction()
    {
        View.masterView.ShowPlayActTip();
        var huEffectPerfab = Resources.Load<GameObject>("Effect/HuEffect/HuEffect");
        View.huEffect = GameObject.Instantiate(huEffectPerfab);
        var defaultPosition = View.huEffect.GetComponent<RectTransform>().localPosition;
        View.huEffect.GetComponent<RectTransform>().SetParent(View.ViewRoot.GetComponent<RectTransform>());
        View.huEffect.GetComponent<RectTransform>().localScale = Vector3.one;
        View.huEffect.GetComponent<RectTransform>().localPosition = defaultPosition;
        View.huEffect.GetComponent<Animator>().enabled = true;
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var actPlayerInfoVO = battleProxy.playerIdInfoDic[battleProxy.playerActS2C.userId];
        var actIndex = (actPlayerInfoVO.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        if (actIndex == 0)
        {
            View.headItemList[0].GetComponent<HeadItem>().HidenPlayActTip();
        }
        battleProxy.isPlayHu = true;
        Timer.Instance.AddTimer(1, 1, 3, RemoveHuEffect);
    }

    /// <summary>
    /// 移除胡牌动作
    /// </summary>
    private void RemoveHuEffect()
    {
        GameObject.DestroyImmediate(View.huEffect);
        View.huEffect = null;
        battleProxy.isPlayHu = false;
        if (battleProxy.matchResultS2C != null && !UIManager.Instance.GetUIView(UIViewID.MATCH_RESULT_VIEW).IsShow)
        {
            UIManager.Instance.ShowUI(UIViewID.MATCH_RESULT_VIEW);
        }
    }

    /// <summary>
    /// 解散房间
    /// </summary>
    private void OnDissloutionClick()
    {
        if (playerInfoProxy.UserInfo.UserID != battleProxy.creatorId && !battleProxy.isStart)
        {
            DialogMsgVO dialogMsgVO = new DialogMsgVO();
            dialogMsgVO.title = "退出确认";
            dialogMsgVO.content = "是否退出房间";
            dialogMsgVO.dialogType = DialogType.CONFIRM;
            dialogMsgVO.confirmCallBack = delegate { ConfirmExit(); };
            DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
            dialogView.data = dialogMsgVO;
        }
        else
        {
            DialogMsgVO dialogMsgVO = new DialogMsgVO();
            dialogMsgVO.dialogType = DialogType.CONFIRM;
            dialogMsgVO.title = "解散确认";
            dialogMsgVO.content = "是否解散房间";
            dialogMsgVO.confirmCallBack = delegate { ConfirmDissloution(); };
            DialogView dialogView = UIManager.Instance.ShowUI(UIViewID.DIALOG_VIEW) as DialogView;
            dialogView.data = dialogMsgVO;
        }        
    }

    /// <summary>
    /// 退出房间确认回调
    /// </summary>
    private void ConfirmExit()
    {
        var exitC2S = new ExitRoomC2S();
        NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.EXIT_C2S.GetHashCode(),0, exitC2S);
    }

    /// <summary>
    /// 解散房间确认回调
    /// </summary>
    private void ConfirmDissloution()
    {
        if (battleProxy.isStart)
        {
            var disloveC2S = new ApplyDissolveRoomC2S();
            NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.DISLOVEAPPLY_C2S.GetHashCode(), 0, disloveC2S, false);
        }
        else
        {
            var disloveC2S = new DissolveRoomC2S();
            NetMgr.Instance.SendBuff(SocketType.BATTLE, MsgNoC2S.DISSOLUTION_C2S.GetHashCode(), 0, disloveC2S);
        }
    }

    /// <summary>
    /// 更新解散房间界面
    /// </summary>
    private void UpdateDisloveBtn()
    {
        if (playerInfoProxy.UserInfo.UserID == battleProxy.creatorId)
        {
            View.dissolutionBtn.gameObject.SetActive(true);
            View.exitBtn.gameObject.SetActive(false);
        }
        else
        {
            View.dissolutionBtn.gameObject.SetActive(false);
            View.exitBtn.gameObject.SetActive(true);
        }
        if (battleProxy.isStart)
        {
            View.dissolutionBtn.gameObject.SetActive(false);
            View.exitBtn.gameObject.SetActive(false);
        }
    }

    /// <summary>
    /// 按下录音按钮
    /// </summary>
    /// <param name="arg0"></param>
    private void OnVoiceDown(BaseEventData arg0)
    {
        View.recordingIcon.SetActive(true);
        SendNotification(NotificationConstant.MEDI_BATTLEREA_STARTRECORD);
    }

    /// <summary>
    /// 松开录音按钮
    /// </summary>
    /// <param name="arg0"></param>
    private void OnVoiceUp(BaseEventData arg0)
    {
        View.recordingIcon.SetActive(false);
        SendNotification(NotificationConstant.MEDI_BATTLEREA_STOPRECORD);
    }

    /// <summary>
    /// 显示语言播放标志
    /// </summary>
    private void ShowVoicePlayIcon(int userId)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var voicePlayerInfo = battleProxy.playerIdInfoDic[userId];
        var updateHeadIndex = (voicePlayerInfo.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        View.headItemList[updateHeadIndex].GetComponent<HeadItem>().ShowVoicePlayIcon();
    }

    /// <summary>
    /// 隐藏语言播放标志
    /// </summary>
    private void HidenVoicePlayIcon(int userId)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var voicePlayerInfo = battleProxy.playerIdInfoDic[userId];
        var updateHeadIndex = (voicePlayerInfo.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        View.headItemList[updateHeadIndex].GetComponent<HeadItem>().HidenVoicePlayIcon();
    }

    /// <summary>
    /// 显示聊天信息
    /// </summary>
    /// <param name="chatS2C"></param>
    private void ShowChatInfo(PushSendChatS2C chatS2C)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var chatPlayerInfo = battleProxy.playerIdInfoDic[chatS2C.senderUserId];
        var updateHeadIndex = (chatPlayerInfo.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        View.headItemList[updateHeadIndex].GetComponent<HeadItem>().ShowChatInfo(chatS2C.content);
        var chatIndex = Array.IndexOf(GlobalData.Chat_Const, chatS2C.content);
        if (chatIndex != -1)
        {
            chatIndex += 1;
            string voiceUrl = string.Empty;
            if (chatPlayerInfo.sex == 0)
            {
                voiceUrl = string.Format("Voices/Woman/{0}", chatIndex);
            }
            else
            {
                voiceUrl = string.Format("Voices/Man/{0}", chatIndex);
            }
            GameMgr.Instance.StartCoroutine(AudioSystem.Instance.PlayEffectAudio(voiceUrl));
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="chatS2C"></param>
    private void ShowFace(PushSendChatS2C chatS2C)
    {
        var selfInfoVO = battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID];
        var chatPlayerInfo = battleProxy.playerIdInfoDic[chatS2C.senderUserId];
        var updateHeadIndex = (chatPlayerInfo.sit - selfInfoVO.sit + GlobalData.SIT_NUM) % GlobalData.SIT_NUM;
        int faceIndex = int.Parse(chatS2C.content.Replace(GlobalData.FACE_PREFIX, ""));
        View.headItemList[updateHeadIndex].GetComponent<HeadItem>().ShowFace(faceIndex);
    }

    /// <summary>
    /// 显示播放界面
    /// </summary>
    private void ShowReportView()
    {
        View.reportView.SetActive(true);
        View.reportView.GetComponent<ReportView>().PlayReport();
    }

    /// <summary>
    /// 点击聊天按钮
    /// </summary>
    private void OnChatClick()
    {
        UIManager.Instance.ShowUI(UIViewID.CHAT_VIEW);
    }

    /// <summary>
    /// 打开设置界面
    /// </summary>
    private void OnSettingClick()
    {
        UIManager.Instance.ShowUI(UIViewID.SETTING_VIEW);
    }

    /// <summary>
    /// 更新准备按钮
    /// </summary>
    private void UpdateReadyBtn()
    {
        View.readyBtn.gameObject.SetActive(!battleProxy.playerIdInfoDic[playerInfoProxy.UserInfo.UserID].isReady);
    }
    /// <summary>
    /// 更新开始按钮
    /// </summary>
    private void UpdateStartBtn()
    {
        if (battleProxy.creatorId == playerInfoProxy.UserInfo.UserID)
        {
            View.startBtn.gameObject.SetActive(true);
        }
        else
        {
            View.startBtn.gameObject.SetActive(false);
        }
    }
    
    /// <summary>
    /// 更新邀请按钮
    /// </summary>
    private void UpdateInviteBtn()
    {
        if (battleProxy.creatorId == playerInfoProxy.UserInfo.UserID &&
            battleProxy.playerIdInfoDic.Count < GlobalData.SIT_NUM)
        {
            View.inviteBtn.gameObject.SetActive(true);
        }
        else
        {
            View.inviteBtn.gameObject.SetActive(false);
        }
    }

    /// <summary>
    /// 更新听牌图标
    /// </summary>
    private void UpdateTingIcon()
    {
        View.headItemList[0].GetComponent<HeadItem>().UpdateTingIcon();
    }

    /// <summary>
    /// 邀请好友
    /// </summary>
    private void OnInviteClick()
    {
        if (GlobalData.sdkPlatform == SDKPlatform.WEIXIN_ANDROID)
        {
            var hallProxy = ApplicationFacade.Instance.RetrieveProxy(Proxys.HALL_PROXY) as HallProxy;
            string inviteUrl = string.Format("{0}?{1}={2}&{3}={4}",GlobalData.ShareUrl, StartUpParam.TYPE,StartUpType.JOINROOM,StartUpParam.ROOMID, hallProxy.HallInfo.RoomCode);
            string title = "快来加入房间吧";
            string desc = string.Format("快来加入房间吧，我的房号{0}", hallProxy.HallInfo.RoomCode);

            SdkInterface.WeiXinShare(string.Format("{0}|{1}|{2}", inviteUrl, title, desc), false);
        }
    }
}